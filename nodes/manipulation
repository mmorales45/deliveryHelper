#!/usr/bin/env python3

import sys
import rospy
import moveit_commander
import geometry_msgs.msg
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse

TEST_POSE = [-0.1000, -2.0, 0.05, 1.4, -0.2, 1.36, -1.39]

class Manipulation:
    def __init__(self): 
        
        moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander('robot/robot_description')
        self.scene = moveit_commander.PlanningSceneInterface()
        self.group_arm = moveit_commander.MoveGroupCommander("robot_description/right_arm")

        self.robot_step = rospy.Service("marco_test_pose", Empty, self.move_sawyer) 

    def move_sawyer(self):
        self.group_arm.set_joint_value_target(TEST_POSE)
        (success_flag, trajectory_message,planning_time, error_code) = self.group_arm.plan()
        rospy.loginfo(f"Error code = {error_code}")
        self.group_arm.execute(trajectory_message,wait=True)
        self.group_arm.stop()
        self.group_arm.clear_pose_targets()

def main(): #The main function.
    try:
        move_arm = Manipulation()
        rospy.spin()

    except rospy.ROSInterruptException:
        return
    except KeyboardInterrupt:
        return


if __name__ == "__main__":
    main()
    
    # rosrun intera_examples joint_position_keyboard.py //use this for moving the arm
    