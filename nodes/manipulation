#!/usr/bin/env python3
#rsync -av /home/mmoral45/DeliveryHelper/src/deliveryhelper/nodes/ administrator@192.168.131.1:/home/administrator/test_dir/DeliveryHelper/src/deliveryhelper/nodes/
import sys
import rospy
import moveit_commander
import geometry_msgs.msg
from moveit_commander.conversions import pose_to_list, list_to_pose
from std_srvs.srv import Empty, EmptyResponse
from control_msgs.msg import GripperCommandAction, GripperCommandGoal
import actionlib
from std_msgs.msg import String

Looking_Pose = [0.1664384765625, -1.058619140625, 1.3546494140625, -0.1273505859375, -1.5579365234375, -0.659412109375, -1.4617265625]
Above_block = [1.125154296875, -1.6963369140625, 1.8482392578125, -3.0439, -1.8687548828125, -0.1779755859375, -1.4625390625]
Picking_Pose = [0.978341796875, -1.312294921875, 1.8698056640625, -3.0103505859375, -1.87225390625, 0.2057236328125, -1.4613125]
Dropping_Pose = [1.063248046875, -1.352912109375, 2.7138017578125, -2.6830439453125, -1.0654228515625, 1.3698251953125, -1.4621259765625]
# test_pose = [0.24,0.34,0.35,1,0,0,0]
test_pose = [0.29788,0.32563,0.31552,-0.69960,0.71356,0.0346,0.013]

class Manipulation:
    def __init__(self): 
        self.state = String()
        self.state.data = "stopped"
        moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander(robot_description='robot_description', ns="robot")
        self.scene = moveit_commander.PlanningSceneInterface()
        self.group_arm = moveit_commander.MoveGroupCommander("right_arm", robot_description='robot_description')
        self.client = actionlib.SimpleActionClient('/robot/end_effector/right/gripper_action', GripperCommandAction)
        rospy.Subscriber("/delivery_state",String,self.state_callback)
        self.pub = rospy.Publisher("/delivery_state",String, queue_size=10)
        
        self.robot_look = rospy.Service("marco_look", Empty, self.move_sawyer_look) 
        self.robot_pick = rospy.Service("marco_pick", Empty, self.move_sawyer_pick) 
        self.robot_drop = rospy.Service("marco_place", Empty, self.move_sawyer_drop) 
        self.gripper_open_srv = rospy.Service("marco_open", Empty, self.gripper_open) 
        self.gripper_close_srv = rospy.Service("marco_close", Empty, self.gripper_close) 
        self.pick_and_place_srv = rospy.Service("marco_do_all", Empty, self.pick_and_place) 
        
        rospy.sleep(1.0)
        
        # self.move_arm(Looking_Pose)
        
        self.timer = rospy.Timer(rospy.Duration(1/100), self.main_loop)
        

        
        
        
    def state_callback(self,current_state):
        self.state = current_state
        
        
    def main_loop(self,timer):
        self.pub.publish(self.state)
        pos = self.group_arm.get_current_pose("right_hand")
        # rospy.loginfo(f"ARM Position --> {pos}")
        if(self.state.data == "deliver"):
            self.pick_and_place(0)
            self.state.data = "Stopped"
            self.pub.publish(self.state)
        
        
########################################### Services
    def pick_and_place(self,req):
        self.move_arm(Above_block)
        self.move_arm(Picking_Pose)
        self.close_gripper()
        self.move_arm(Dropping_Pose)
        self.open_gripper()
        self.move_arm(Looking_Pose)
        
        
    def move_sawyer_look(self,req):  
        self.group_arm.set_joint_value_target(Looking_Pose)
        (success_flag, trajectory_message,planning_time, error_code) = self.group_arm.plan()
        rospy.loginfo(f"Movement Completed Successfully= {error_code}")
        self.group_arm.execute(trajectory_message,wait=True)
        self.group_arm.stop()
        self.group_arm.clear_pose_targets()
        return EmptyResponse()
        
    def move_sawyer_pick(self,req):  
        print ("Going to :" + str(test_pose))
        self.group_arm.set_pose_target(test_pose)
        (result, plan, frac, errCode) = self.group_arm.plan()
        rospy.loginfo(f"err code = {errCode}")
        result = self.group_arm.execute(plan, wait=True)
        return EmptyResponse()

    def move_sawyer_drop(self,req):  
        test_pose[2] = test_pose[2] - 0.05
        return EmptyResponse()
    
    def gripper_close(self,req):
        print(self.group_arm.get_current_pose().pose)
        return EmptyResponse()
        
    def gripper_open(self,req):
        goal = GripperCommandGoal()
        goal.command.position= 0.2
        # Fill in the goal here
        self.client.send_goal(goal)
        self.client.wait_for_result(rospy.Duration.from_sec(2.0))
        return EmptyResponse()
####################################################### functions
    def move_arm(self,position):
        self.group_arm.set_joint_value_target(position)
        (success_flag, trajectory_message,planning_time, error_code) = self.group_arm.plan()
        rospy.loginfo(f"Movement Completed Successfully = {error_code}")
        self.group_arm.execute(trajectory_message,wait=True)
        self.group_arm.stop()
        self.group_arm.clear_pose_targets()
        
    def close_gripper(self):
        goal = GripperCommandGoal()
        goal.command.position= 0
        # Fill in the goal here
        self.client.send_goal(goal)
        self.client.wait_for_result(rospy.Duration.from_sec(5.0))
        
    def open_gripper(self):
        goal = GripperCommandGoal()
        goal.command.position= 0.2
        # Fill in the goal here
        self.client.send_goal(goal)
        self.client.wait_for_result(rospy.Duration.from_sec(5.0))
        

def main(): #The main function.
    rospy.init_node('arm',log_level=rospy.DEBUG)
    try:
        move_arm = Manipulation()
        rospy.spin()

    except rospy.ROSInterruptException:
        return
    except KeyboardInterrupt:
        return


if __name__ == "__main__":
    main()
    
    # rosrun intera_examples joint_position_keyboard.py //use this for moving the arm
    